@page "/other/projects"
@using WeatherInTheCity.Client.Extensions
@using WeatherInTheCity.Cms

@inject ICmsService CmsService
@inject ILogger<OtherProjects> Logger

<PageTitle>Projects - Michał Pałucki</PageTitle>

@if (_projects is null)
{
    <p>Failed to load content</p>
}
else if(_projects.Any() is false){
    <Loading/>
}
else
{
    <MudGrid>
        @foreach (var project in _projects)
        {
            <MudItem Class="d-flex flex-auto" xs="12" sm="6">
                <MudCard Class="flex-grow-1">
                    @if (project.Img is not null)
                    {
                        <MudCardMedia Image="@project.Img.Url" Height="200"/>
                    }
                    <MudCardContent>
                        <MudText Typo="Typo.h6" Class="mb-4 align-content-center">
                            @project.Name<a class="mud-typography-subtitle2">, @project.Year</a>
                        </MudText>
                        <div class="d-flex flex-column gap-5">
                            @project.Content.Html.AddStyles(_tagStyles).AsRenderFragment()
                        </div>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Default"
                                   EndIcon="@Icons.Material.Filled.ArrowForward"
                                   Href="@project.GitLink"
                                   Target="_blank"
                                   data-umami-event="@($"click_git_project_{project.Name.ToLower().Replace(" ", "-")}")">
                            GitHub
                        </MudButton>
                        <MudSpacer/>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {

    private readonly Dictionary<string, string> _tagStyles = new()
    {
        { "<p>", """<p class="mud-typography mud-typography-body2">""" }
    };

    private IEnumerable<Project>? _projects = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            _projects = await CmsService.GetProjectsAsync(cts.Token);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Error loading Projects");
            _projects = null;
        }
    }

}