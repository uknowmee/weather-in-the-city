@page "/cities"
@using System.Globalization
@using WeatherInTheCity.Ai
@using WeatherInTheCity.Cities
@using WeatherInTheCity.Weather

@inject ISnackbar Snackbar
@inject CtxCitiesDb CtxCitiesDb
@inject ILogger<Cities> Logger
@inject IAiService AiService
@inject IWeatherService WeatherService

@rendermode InteractiveServer

<MudDataGrid
    T="City"
    Items="_cities"
    Height="70vh" Hover="true" Elevation="10"
    MultiSelection="false" ShowColumnOptions="false"
    Filterable="true" SortMode="SortMode.Multiple" QuickFilter="QuickFilter"
    ReadOnly="false"
    EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual" EditDialogOptions="@(new DialogOptions { CloseOnEscapeKey = true })"
    StartedEditingItem="StartedEditingCity" CanceledEditingItem="CanceledEditingCity" CommittedItemChanges="CommittedCityChangesAsync"
    Class="d-flex flex-column">

    <ToolBarContent>
        <div class="d-flex flex-row gap-3 justify-space-between mud-width-full">
            <MudText Typo="Typo.h6">Cities</MudText>
            <div class="d-flex flex-row gap-3">
                <MudTextField
                    @bind-Value="_searchString"
                    Placeholder="Search"
                    Adornment="Adornment.Start"
                    Immediate="true"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium"
                    Class="mt-0"/>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewCityAsync">Add City</MudButton>
            </div>
        </div>
    </ToolBarContent>

    <Columns>
        <div>
            <HierarchyColumn T="City" Hidden="true"/>
            <TemplateColumn T="City">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small"
                                   Icon="@(_showCityDetails.Contains(context.Item.CityId) ? Icons.Material.Filled.KeyboardArrowDown : Icons.Material.Filled.KeyboardArrowRight)"
                                   Disabled="@(string.IsNullOrWhiteSpace(context.Item.Name) || _isFetchingCityInfo.Contains(context.Item.CityId))"
                                   OnClick="() => OnHideShowDetailsClickAsync(context)"
                                   Color="Color.Default"/>
                </CellTemplate>
            </TemplateColumn>
        </div>

        <PropertyColumn Property="x => x.Name" Title="Name"/>

        <PropertyColumn Property="x => x.Population" Title="Population" Format="{0:N0}">
            <CellTemplate>
                @context.Item.Population.ToString("N0", CultureInfo.InvariantCulture)
            </CellTemplate>
        </PropertyColumn>

        <TemplateColumn Title="Capital"
                        Sortable="true"
                        SortBy="x => x.IsCapital"
                        Editable="true">
            <CellTemplate>
                <MudCheckBox @bind-Value="context.Item.IsCapital" ReadOnly="true"/>
            </CellTemplate>
            <EditTemplate>
                <div class="d-flex flex-row mt-1 mb-1">
                    <MudText Class="center align-content-center">Is Capital?</MudText>
                    <MudCheckBox @bind-Value="context.Item.IsCapital"/>
                </div>
            </EditTemplate>
        </TemplateColumn>

        <PropertyColumn Property="x => x.FoundationDate" Filterable="false" Format="@DateFormat" Title="Foundation">
            <EditTemplate>
                <MudDatePicker
                    MinDate="@(new DateTime(1, 1, 1))"
                    MaxDate="DateTime.Now"
                    DateFormat="@DateFormat"
                    ShowToolbar="false"
                    Editable="true"
                    Placeholder="@DateFormat"
                    @bind-Date="@context.Item.FoundationDateTime"/>
            </EditTemplate>
        </PropertyColumn>

        <div class="d-flex flex-row justify-end">
            <TemplateColumn>
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync"/>
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn>
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteCityAsync(context.Item)" Color="Color.Error"/>
                </CellTemplate>
            </TemplateColumn>
        </div>
    </Columns>

    <ChildRowContent>
        <MudCard>
            <MudCardHeader Class="py-1">
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="py-2">
                <div class="d-flex flex-column gap-4">
                    <MudText Typo="Typo.body1">@(context.Item.Description.Any() ? string.Join("", context.Item.Description) : "No description available.")</MudText>
                    <div>
                        @if (context.Item.CurrentCondition is not null)
                        {
                            <MudText>Current Weather conditions:</MudText>
                            <div class="pl-5 pt-2">
                                <MudText>Temperature: @context.Item.CurrentCondition.TempC °C</MudText>
                                <MudText>Weather: @context.Item.CurrentCondition.WeatherDescription.FirstOrDefault()?.Value</MudText>
                                <MudText>Humidity: @context.Item.CurrentCondition.Humidity %</MudText>
                                <MudText>Wind Speed: @context.Item.CurrentCondition.WindSpeedKmph km/h</MudText>
                                <MudText>Feels Like: @context.Item.CurrentCondition.FeelsLikeC °C</MudText>

                                <MudText>Local Observation Time: @context.Item.CurrentCondition.LocalObservationTime</MudText>
                                <MudText>Last Update: @context.Item.CurrentCondition.LastUpdate.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</MudText>
                            </div>
                        }
                        else
                        {
                            <MudText Typo="Typo.body1">No current condition available.</MudText>
                        }
                    </div>
                </div>
            </MudCardContent>
        </MudCard>
    </ChildRowContent>

    <PagerContent>
        <MudDataGridPager T="City"/>
    </PagerContent>

</MudDataGrid>